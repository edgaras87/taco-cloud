spring:
    config:
        activate:
            on-profile: prod
    # -- MySQL connection properties
    datasource:
        driver-class-name: com.mysql.cj.jdbc.Driver
        username: root
        password: root
        url: jdbc:mysql://localhost:3306/tacocloud_jpa_prod
        #url: jdbc:mysql://localhost:3306/tacocloud_jpa?createDatabaseIfNotExist=true
        # (deprecated) schema: taco-schema.sql, order-schema.sql, ingredient-schema.sql, user-schema.sql
        # (deprecated) data: ingredient.sql
        # (other data source will be ignored) jndi-name: java:/comp/env/jdbc/tacoCloudDS 

# -- Sql configuration --
    jpa:
        properties:
            hibernate:
                # -- Hibernate SQL dialect --
                dialect: org.hibernate.dialect.MySQL8Dialect
        hibernate:
            # -- The hibernate property (create) will automatically create database tables based on the entity classes 
            # -- when the application starts. Drop and create new tables (create, create-drop, validate, update, none)
            # -- Only for testing purpose - comment this in production
            # -- https://stackoverflow.com/questions/438146/what-are-the-possible-values-of-the-hibernate-hbm2ddl-auto-configuration-and-wha#:~:text=So%20the%20list%20of%20possible%20options%20are%2C,with%20the%20schema%2C%20makes%20no%20changes%20to%20the%20database
            ddl-auto: none
        # -- Log JPA queries (Comment this in production) --
        show-sql: false
    # -- Without this, initial sql files (schema.sql, data.sql) won't be executed --
    sql:
        init:
            mode: always
            # -- database initialization scripts to run when the application starts --
            #data-locations: taco-schema.sql, order-schema.sql, ingredient-schema.sql, user-schema.sql,ingredient.sql



# -- Security --
    security:
        # -- Default user properties --
        user: 
            name: user
            password: pass
            roles: USER
        # -- how this is done: https://spring.io/guides/tutorials/spring-boot-oauth2/ --
        oauth2:
            client:
                registration:
                    google:
                        client-id: 465024727831-cp2i4ge20f53gtkjkhlk278n7rue434u.apps.googleusercontent.com
                        client-secret: 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    
    # Predefined variables: https://code.visualstudio.com/docs/editor/variables-reference


# --- HTTPS in the embedded server ---
# *https://localhost:8443/
# *Create a keystore witm cmd: $ keytool -keystore mykeys.jks -genkey -alias tomcat -keyalg RSA
#server:
    #port: 8443
    #port: 0  #(random port) server.
    #ssl:
        #key-store: file:///C:/Users/Klaus/Documents/VisualStudio/Taco_cloud_HTTPS_keystore/mykeys.jks   # -- URL to load it from the filesystem --
        #key-store: classpath:mykeys.jks # -- in application resource directory --
        #key-store-password: asdasd
        #key-password: asdasd


# Predefined variables
# -- log configuration --
logging:
    file:
        path: /var/logs/
        name: TacoCloud.log
    # level:
    #     root: WARN 
    #     org:
    #         springframework:
    #             security: DEBUG


myVar: my property ${logging.file.path} # https://stackabuse.com/spring-boot-configuring-properties/, https://forum.camunda.org/t/could-not-resolve-placeholder-feign-client-config-remoterepositoryservice-url/23838/5
taco:
    orders:
        pageSize: 5 # $ export TACO_ORDERS_PAGESIZE=10