# MySQL connection properties
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.url=jdbc:mysql://localhost:3306/tacocloud_jpa
# spring.database.url=jdbc:mysql://localhost:3306/tacocloud_jpa?createDatabaseIfNotExist=true

# Log JPA queries
# Comment this in production
#spring.jpa.show-sql=true
# The hibernate property (create) will automatically create database tables based on the entity classes 
# when the application starts. Drop and create new tables (create, create-drop, validate, update, none)
# Only for testing purpose - comment this in production
# https://stackoverflow.com/questions/438146/what-are-the-possible-values-of-the-hibernate-hbm2ddl-auto-configuration-and-wha#:~:text=So%20the%20list%20of%20possible%20options%20are%2C,with%20the%20schema%2C%20makes%20no%20changes%20to%20the%20database
spring.jpa.hibernate.ddl-auto=none 
# Hibernate SQL dialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
# Without this, initial sql files (schema.sql, data.sql) won't be executed
spring.sql.init.mode=always

# Default user properties (when UserDetailsService is in default spring security settings)
spring.security.user.name=a
spring.security.user.password=a
spring.security.user.roles=USER

# how this is done: https://spring.io/guides/tutorials/spring-boot-oauth2/
spring.security.oauth2.client.registration.google.client-id=465024727831-cp2i4ge20f53gtkjkhlk278n7rue434u.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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